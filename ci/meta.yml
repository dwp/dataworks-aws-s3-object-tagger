meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-s3-object-tagger
        inputs:
          - name: dataworks-aws-s3-object-tagger
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-s3-object-tagger
        inputs:
          - name: dataworks-aws-s3-object-tagger
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-s3-object-tagger
        inputs:
          - name: dataworks-aws-s3-object-tagger
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
      params:
        DETAILED_EXITCODE: -detailed-exitcode
    test-ecs-ami:
      task: test-ecs-ami
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              source ./previous_success/exit-if-succeeded.sh
              export AWS_DEFAULT_REGION
              source /assume-role
              set -x
              max_retries=15
              AMI="$(cat dw-al2-ecs-ami/id)"
              CEs="$(aws batch describe-compute-environments)"

              if echo $CEs | grep -q $AMI; then echo "Compute environment is using the expected ami";
              else echo "No compute environment is associated with the AMI to be tested"; exit 1;
              fi

              CEs=$(aws batch describe-compute-environments --query 'computeEnvironments[]' \
              | jq -r '.[] | select(.computeResources.imageId=='\"$AMI\"') | .computeEnvironmentName')

              CE="$(echo $CEs | grep -o -e $COMPUTE_ENV_PREFIX'[a-zA-Z0-9_-]*')"

              job_id=$(aws batch submit-job --job-name s3_object_tagger_test_ami_job \
              --job-definition s3_object_tagger_test_ami_job --job-queue amitest_s3tagger | jq -r '.jobId')

              times_retried=1
              while [ $times_retried -le $max_retries ]
              do
                sleep 60
                job_status="$(aws batch describe-jobs --jobs $job_id | jq -r '.jobs[0].status')"
                if [ "$job_status" == "SUCCEEDED" ]; then
                  exit 0
                fi
                let "times_retried+=1"
              done
              exit 1
        inputs:
          - name: dw-al2-ecs-ami
          - name: previous_success
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        COMPUTE_ENV_PREFIX: s3_object_tagger_


    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              source ./previous_success/exit-if-succeeded.sh
              set +x
              AMI_ID=$(cat dw-al2-ecs-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results
              echo "$AMI_ID $RESULT" > "$PIPELINE.test"
              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: dw-al2-ecs-ami
          - name: previous_success
    check-ami-test-results:
      task: check-ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              PREVIOUS_SUCCESS=false
              AMI_ID=$(cat untested_ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              PATH_TO_RESULTS="ami-builder-configs/results"
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              if [ -f "./$PATH_TO_RESULTS/$PIPELINE.test" ]; then
                set +e
                grep "$AMI_ID SUCCESS" "./$PATH_TO_RESULTS/$PIPELINE.test"
                if [ $? -eq 0 ]; then
                  PREVIOUS_SUCCESS=true
                fi
                set -e
              fi
              touch ./previous_success/exit-if-succeeded.sh
              if $PREVIOUS_SUCCESS; then
                 echo 'echo "AMI already passed. Exiting..."; exit 0' > ./previous_success/exit-if-succeeded.sh
              fi
              chmod +x ./previous_success/exit-if-succeeded.sh
        outputs:
          - name: previous_success
        inputs:
          - name: meta
          - name: untested_ami
